//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IvbetoPruebaTecnicaEntities : DbContext
    {
        public IvbetoPruebaTecnicaEntities()
            : base("name=IvbetoPruebaTecnicaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Distribuidora> Distribuidoras { get; set; }
        public virtual DbSet<Artista> Artistas { get; set; }
        public virtual DbSet<Disco> Discoes { get; set; }
    
        public virtual int ArtistaAdd(string nombre, Nullable<int> anioDebut, string nacionalidad, ObjectParameter filasInsertadas)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var anioDebutParameter = anioDebut.HasValue ?
                new ObjectParameter("AnioDebut", anioDebut) :
                new ObjectParameter("AnioDebut", typeof(int));
    
            var nacionalidadParameter = nacionalidad != null ?
                new ObjectParameter("Nacionalidad", nacionalidad) :
                new ObjectParameter("Nacionalidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ArtistaAdd", nombreParameter, anioDebutParameter, nacionalidadParameter, filasInsertadas);
        }
    
        public virtual int ArtistaDelete(Nullable<int> idArtista, ObjectParameter filasEliminadas)
        {
            var idArtistaParameter = idArtista.HasValue ?
                new ObjectParameter("IdArtista", idArtista) :
                new ObjectParameter("IdArtista", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ArtistaDelete", idArtistaParameter, filasEliminadas);
        }
    
        public virtual ObjectResult<ArtistaGetAll_Result> ArtistaGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArtistaGetAll_Result>("ArtistaGetAll");
        }
    
        public virtual ObjectResult<ArtistaGetById_Result> ArtistaGetById(Nullable<int> idArtista)
        {
            var idArtistaParameter = idArtista.HasValue ?
                new ObjectParameter("IdArtista", idArtista) :
                new ObjectParameter("IdArtista", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArtistaGetById_Result>("ArtistaGetById", idArtistaParameter);
        }
    
        public virtual int ArtistaUpdate(Nullable<int> idArtista, string nombre, Nullable<int> anioDebut, string nacionalidad, ObjectParameter filasActualizadas)
        {
            var idArtistaParameter = idArtista.HasValue ?
                new ObjectParameter("IdArtista", idArtista) :
                new ObjectParameter("IdArtista", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var anioDebutParameter = anioDebut.HasValue ?
                new ObjectParameter("AnioDebut", anioDebut) :
                new ObjectParameter("AnioDebut", typeof(int));
    
            var nacionalidadParameter = nacionalidad != null ?
                new ObjectParameter("Nacionalidad", nacionalidad) :
                new ObjectParameter("Nacionalidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ArtistaUpdate", idArtistaParameter, nombreParameter, anioDebutParameter, nacionalidadParameter, filasActualizadas);
        }
    
        public virtual int DiscoAdd(string titulo, Nullable<double> duracion, Nullable<int> anio, string generoMusical, Nullable<int> idDistribuidora, Nullable<int> idArtista, Nullable<int> disponibilidad, Nullable<int> ventas, ObjectParameter filasInsertadas)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("Duracion", duracion) :
                new ObjectParameter("Duracion", typeof(double));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("Anio", anio) :
                new ObjectParameter("Anio", typeof(int));
    
            var generoMusicalParameter = generoMusical != null ?
                new ObjectParameter("GeneroMusical", generoMusical) :
                new ObjectParameter("GeneroMusical", typeof(string));
    
            var idDistribuidoraParameter = idDistribuidora.HasValue ?
                new ObjectParameter("IdDistribuidora", idDistribuidora) :
                new ObjectParameter("IdDistribuidora", typeof(int));
    
            var idArtistaParameter = idArtista.HasValue ?
                new ObjectParameter("IdArtista", idArtista) :
                new ObjectParameter("IdArtista", typeof(int));
    
            var disponibilidadParameter = disponibilidad.HasValue ?
                new ObjectParameter("Disponibilidad", disponibilidad) :
                new ObjectParameter("Disponibilidad", typeof(int));
    
            var ventasParameter = ventas.HasValue ?
                new ObjectParameter("Ventas", ventas) :
                new ObjectParameter("Ventas", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscoAdd", tituloParameter, duracionParameter, anioParameter, generoMusicalParameter, idDistribuidoraParameter, idArtistaParameter, disponibilidadParameter, ventasParameter, filasInsertadas);
        }
    
        public virtual int DiscoDelete(Nullable<int> idDisco, ObjectParameter filasElimindas)
        {
            var idDiscoParameter = idDisco.HasValue ?
                new ObjectParameter("IdDisco", idDisco) :
                new ObjectParameter("IdDisco", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscoDelete", idDiscoParameter, filasElimindas);
        }
    
        public virtual int DiscoUpdate(Nullable<int> idDisco, string titulo, Nullable<double> duracion, Nullable<int> anio, string generoMusical, Nullable<int> idDistribuidora, Nullable<int> idArtista, Nullable<int> disponibilidad, Nullable<int> ventas, ObjectParameter filasActualizadas)
        {
            var idDiscoParameter = idDisco.HasValue ?
                new ObjectParameter("IdDisco", idDisco) :
                new ObjectParameter("IdDisco", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("Duracion", duracion) :
                new ObjectParameter("Duracion", typeof(double));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("Anio", anio) :
                new ObjectParameter("Anio", typeof(int));
    
            var generoMusicalParameter = generoMusical != null ?
                new ObjectParameter("GeneroMusical", generoMusical) :
                new ObjectParameter("GeneroMusical", typeof(string));
    
            var idDistribuidoraParameter = idDistribuidora.HasValue ?
                new ObjectParameter("IdDistribuidora", idDistribuidora) :
                new ObjectParameter("IdDistribuidora", typeof(int));
    
            var idArtistaParameter = idArtista.HasValue ?
                new ObjectParameter("IdArtista", idArtista) :
                new ObjectParameter("IdArtista", typeof(int));
    
            var disponibilidadParameter = disponibilidad.HasValue ?
                new ObjectParameter("Disponibilidad", disponibilidad) :
                new ObjectParameter("Disponibilidad", typeof(int));
    
            var ventasParameter = ventas.HasValue ?
                new ObjectParameter("Ventas", ventas) :
                new ObjectParameter("Ventas", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscoUpdate", idDiscoParameter, tituloParameter, duracionParameter, anioParameter, generoMusicalParameter, idDistribuidoraParameter, idArtistaParameter, disponibilidadParameter, ventasParameter, filasActualizadas);
        }
    
        public virtual ObjectResult<DiscoGetAll_Result> DiscoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscoGetAll_Result>("DiscoGetAll");
        }
    
        public virtual ObjectResult<DiscoGetById_Result> DiscoGetById(Nullable<int> idDisco)
        {
            var idDiscoParameter = idDisco.HasValue ?
                new ObjectParameter("IdDisco", idDisco) :
                new ObjectParameter("IdDisco", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscoGetById_Result>("DiscoGetById", idDiscoParameter);
        }
    
        public virtual ObjectResult<DistribuidoraGetAll_Result> DistribuidoraGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DistribuidoraGetAll_Result>("DistribuidoraGetAll");
        }
    }
}
